my:
  info: huhu222
## Spring相关配置   1
spring:
  cloud:
    stream:
      kafka:
        binder:
          brokers:  192.168.1.170:9092,192.168.1.170:9093,192.168.1.170:9094  # kafka服务地址和端口
          zkNodes: 192.168.1.170:2182  # ZK的集群配置地址和端口
        bindings: # 服务的整合处理
          output: # 这个名字是一个通道的名称（生产端用output）
            destination: studyExchange # 表示要使用的Exchange名称定义
            content-type: application/json # 设置消息类型，本次为json，文本则设置“text/plain”
            binder: defaultRabbit  # 设置要绑定的消息服务的具体设置
           # group: codemanA  # 分组 服务端
  #rabbitmq:
   # host: 192.168.1.170
   # port: 5672
    #username: guest
   # password: guest
  datasource:
    url: jdbc:mysql://localhost:3306/mall?serverTimezone=UTC&characterEncoding=utf-8&useSSL=false
    driver-class-name: com.mysql.jdbc.Driver
    username: root
    password: zhj123
    type: org.springframework.jdbc.datasource.DriverManagerDataSource
    dbcp2:
      min-idle: 5                                           # 数据库连接池的最小维持连接数
      initial-size: 5                                       # 初始化连接数
      max-total: 5                                          # 最大连接数
      max-wait-millis: 200                                  # 等待连接获取的最大超时时间
      #mysql数据库验证
      test-while-idle: false
      validation-query: SELECT 1
      validation-query-timeout: 10
  kafka:
    bootstrap-servers: 192.168.1.170:9092,192.168.1.170:9093,192.168.1.170:9094
    producer:
      #      //幂等性
      #      props.put(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG, true);
      #      // 重试次数，0为不启用重试机制，幂等性的时候必须大于0
      #      props.put(ProducerConfig.RETRIES_CONFIG, 1);
      # 发生错误后，消息重发的次数。
      retries: 1
      #当有多个消息需要被发送到同一个分区时，生产者会把它们放在同一个批次里。该参数指定了一个批次可以使用的内存大小，按照字节数计算。
      batch-size: 16384
      # 设置生产者内存缓冲区的大小。
      buffer-memory: 33554432
      # 键的序列化方式
      #key-serializer: org.apache.kafka.common.serialization.StringSerializer
      # 值的序列化方式
      #value-serializer: org.apache.kafka.common.serialization.StringSerializer
      # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。
      # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。
      # acks=all(-1) ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。
      acks: -1
    consumer:
      #      groupId: consumergroup1
      # 自动提交的时间间隔 在spring boot 2.X 版本中这里采用的是值的类型为Duration 需要符合特定的格式，如1S,1M,2H,5D
      auto-commit-interval: 1S
      # 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理：
      # latest（默认值）在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的记录）
      # earliest ：在偏移量无效的情况下，消费者将从起始位置读取分区的记录
      auto-offset-reset: earliest
      # 是否自动提交偏移量，默认值是true,为了避免出现重复数据和数据丢失，可以把它设置为false,然后手动提交偏移量
      enable-auto-commit: false
      # 键的反序列化方式
      # key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      # 值的反序列化方式
      # value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    listener:
      # 在侦听器容器中运行的线程数。
      concurrency: 5
      #listner负责ack，每调用一次，就立即commit
      ack-mode: manual_immediate
      missing-topics-fatal: false

eureka:
  client:
    register-with-eureka: true
    fetchRegistry: true
    service-url:
      defaultZone: http://eureka7001.com:7001/eureka/


# 日志相关
logging:
  level:
    com:
      codeman:
        mall4springcloud: debug
#          controller: debug
#          mapper:
#            MallUsersMapper: debug
